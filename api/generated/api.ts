/**
 * THIS FILE IS AUTOMATICALLY GENERATED FROM: https://api.sprtverse.com/docs?api-docs.json
 * DO NOT EDIT MANUALLY
 */

import axios from '../axios';
import type {
  ApiResponse,
  CmsuserItem,
  PaginatedResponse,
  CmsuserStoreRequest,
  CmsuserUpdateInfoRequest,
  CmsuserUpdateLanguageRequest,
  Player,
  Sport,
  Team,
  Subscription,
  Currencies,
  UserSubscriptionForContentCreator,
  SubscriptionStatuses,
  SubscriptionForUser,
  UserSubscription,
  Transaction,
  UserItem,
  VerifyUserRequest,
  ContentCreatorRequestDto,
  CreateContentCreatorRequestRequest,
  ContentCreatorProfile,
  ContentCreatorRoles,
  ContentCreatorRequestStatus,
  SaveFavoritesPlayersRequest,
  SaveFavoritesSportsRequest,
  SaveFavoritesTeamsRequest,
} from './interfaces';

export async function loginAdminUser(data: {
  email: string;
  password: string;
}): Promise<
  ApiResponse & {
    data?: {
      access_token?: string;
    };
  }
> {
  const response = await axios.post(`/api/v1/cms/auth/login`, data);
  return response.data;
}

export async function activateCmsUser(id: string): Promise<{
  success?: boolean;
  data?: CmsuserItem;
}> {
  const response = await axios.put(`/api/v1/cms/cms-users/${id}/active`);
  return response.data;
}

export async function destroyCmsUser(id: string): Promise<{
  success?: boolean;
  message?: string;
}> {
  const response = await axios.delete(`/api/v1/cms/cms-users/${id}/destroy`);
  return response.data;
}

export async function disableCmsUser(id: string): Promise<{
  success?: boolean;
  data?: CmsuserItem;
}> {
  const response = await axios.put(`/api/v1/cms/cms-users/${id}/disable`);
  return response.data;
}

export async function listCmsUsers(
  statuses?: ('active' | 'disabled')[],
): Promise<{
  success?: boolean;
  data?: PaginatedResponse;
}> {
  const response = await axios.get(
    `/api/v1/cms/cms-users${statuses ? '?statuses[]=' + statuses.map(String).map(encodeURIComponent).join('&statuses[]=') : ''}`,
  );
  return response.data;
}

export async function getCmsuserMe(): Promise<{
  success?: boolean;
  data?: CmsuserItem;
}> {
  const response = await axios.get(`/api/v1/cms/me`);
  return response.data;
}

export async function storeCmsUser(data: CmsuserStoreRequest): Promise<{
  success?: boolean;
  data?: CmsuserItem;
}> {
  const response = await axios.post(`/api/v1/cms/cms-users/store`, data);
  return response.data;
}

export async function updateCmsUserInfo(
  id: string,
  data: CmsuserUpdateInfoRequest,
): Promise<{
  success?: boolean;
  data?: CmsuserItem;
}> {
  const response = await axios.put(
    `/api/v1/cms/cms-users/${id}/update-info`,
    data,
  );
  return response.data;
}

export async function updateCmsUserLanguage(
  id: string,
  data: CmsuserUpdateLanguageRequest,
): Promise<{
  success?: boolean;
  data?: CmsuserItem;
}> {
  const response = await axios.put(
    `/api/v1/cms/cms-users/${id}/update-language`,
    data,
  );
  return response.data;
}

export async function viewCmsUser(id: string): Promise<{
  success?: boolean;
  data?: CmsuserItem;
}> {
  const response = await axios.put(`/api/v1/cms/cms-users/${id}/view`);
  return response.data;
}

export async function getAllContentCreatorRoles(): Promise<{
  status?: string;
  status_code?: string;
  message?: string;
  data?: {
    value?: string;
    name?: string;
  }[];
}> {
  const response = await axios.get(
    `/api/v1/core/constants/content-creator-roles`,
  );
  return response.data;
}

export async function getDefaultAvatars(): Promise<{
  status?: string;
  status_code?: string;
  message?: string;
  data?: {
    id?: number;
    path?: string;
  }[];
}> {
  const response = await axios.get(`/api/v1/core/constants/default-avatars`);
  return response.data;
}

export async function getAllLanguages(): Promise<{
  status?: string;
  status_code?: string;
  message?: string;
  data?: {
    value?: string;
    name?: string;
  }[];
}> {
  const response = await axios.get(`/api/v1/core/constants/languages`);
  return response.data;
}

export async function getPlayers(
  teamId?: number,
  sportId?: number,
  q?: string,
  length?: number,
): Promise<
  PaginatedResponse & {
    data?: Player[];
  }
> {
  const response = await axios.get(
    `/api/v1/core/favorites/players${(() => {
      const parts = [
        teamId ? 'team_id=' + encodeURIComponent(teamId) : null,
        sportId ? 'sport_id=' + encodeURIComponent(sportId) : null,
        q ? 'q=' + encodeURIComponent(q) : null,
        length ? 'length=' + encodeURIComponent(length) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function getSports(
  q?: string,
  length?: number,
): Promise<
  PaginatedResponse & {
    data?: Sport[];
  }
> {
  const response = await axios.get(
    `/api/v1/core/favorites/sports${(() => {
      const parts = [
        q ? 'q=' + encodeURIComponent(q) : null,
        length ? 'length=' + encodeURIComponent(length) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function getTeams(
  q?: string,
  length?: number,
): Promise<
  PaginatedResponse & {
    data?: Team[];
  }
> {
  const response = await axios.get(
    `/api/v1/core/favorites/teams${(() => {
      const parts = [
        q ? 'q=' + encodeURIComponent(q) : null,
        length ? 'length=' + encodeURIComponent(length) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function getSubscriptions(
  creatorId: number,
  search?: string,
  currencies?: Currencies[],
  minPrice?: number,
  maxPrice?: number,
  sortBy?: 'name' | 'price' | 'created_at',
  sortDirection?: 'asc' | 'desc',
  page?: number,
  perPage?: number,
): Promise<
  PaginatedResponse & {
    data?: Subscription[];
  }
> {
  const response = await axios.get(
    `/api/v1/content-creator/${creatorId}/subscriptions${(() => {
      const parts = [
        search ? 'search=' + encodeURIComponent(search) : null,
        currencies
          ? 'currencies[]=' +
            currencies
              .map(String)
              .map(encodeURIComponent)
              .join('&currencies[]=')
          : null,
        minPrice ? 'min_price=' + encodeURIComponent(minPrice) : null,
        maxPrice ? 'max_price=' + encodeURIComponent(maxPrice) : null,
        sortBy ? 'sort_by=' + encodeURIComponent(sortBy) : null,
        sortDirection
          ? 'sort_direction=' + encodeURIComponent(sortDirection)
          : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        perPage ? 'per_page=' + encodeURIComponent(perPage) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function createSubscription(
  creatorId: number,
  data: {
    name?: string;
    description?: string;
    benefits?: string[];
    trial_period?: number;
  },
): Promise<{
  success?: boolean;
  data?: Subscription;
}> {
  const response = await axios.post(
    `/api/v1/content-creator/${creatorId}/subscriptions`,
    data,
  );
  return response.data;
}

export async function getSubscription(
  creatorId: number,
  id: number,
): Promise<{
  success?: boolean;
  data?: Subscription;
}> {
  const response = await axios.get(
    `/api/v1/content-creator/${creatorId}/subscriptions/${id}`,
  );
  return response.data;
}

export async function updateSubscription(
  creatorId: number,
  id: number,
  data: {
    name?: string;
    price?: number;
    currency?: Currencies;
    description?: string;
    benefits?: string[];
    trial_period?: number;
  },
): Promise<{
  success?: boolean;
  data?: Subscription;
}> {
  const response = await axios.put(
    `/api/v1/content-creator/${creatorId}/subscriptions/${id}`,
    data,
  );
  return response.data;
}

export async function deleteSubscription(
  creatorId: number,
  id: number,
): Promise<{
  success?: boolean;
  message?: string;
}> {
  const response = await axios.delete(
    `/api/v1/content-creator/${creatorId}/subscriptions/${id}`,
  );
  return response.data;
}

export async function getSubscribedUsers(
  creatorId: number,
  page?: number,
  perPage?: number,
  search?: string,
  statuses?: SubscriptionStatuses[],
  startDateFrom?: string,
  startDateTo?: string,
  sortBy?: 'created_at' | 'start_date' | 'end_date' | 'status',
  sortDirection?: 'asc' | 'desc',
): Promise<{
  success?: boolean;
  data?: {
    data?: UserSubscriptionForContentCreator[];
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
  };
}> {
  const response = await axios.get(
    `/api/v1/packages/content-creator/${creatorId}/subscriptions/users${(() => {
      const parts = [
        page ? 'page=' + encodeURIComponent(page) : null,
        perPage ? 'per_page=' + encodeURIComponent(perPage) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
        statuses
          ? 'statuses[]=' +
            statuses.map(String).map(encodeURIComponent).join('&statuses[]=')
          : null,
        startDateFrom
          ? 'start_date_from=' + encodeURIComponent(startDateFrom)
          : null,
        startDateTo ? 'start_date_to=' + encodeURIComponent(startDateTo) : null,
        sortBy ? 'sort_by=' + encodeURIComponent(sortBy) : null,
        sortDirection
          ? 'sort_direction=' + encodeURIComponent(sortDirection)
          : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function getPackagesByCreator(
  creatorId: number,
  page?: number,
  perPage?: number,
  search?: string,
  currencies?: Currencies[],
  minPrice?: number,
  maxPrice?: number,
  sortBy?: 'name' | 'price' | 'created_at',
  sortDirection?: 'asc' | 'desc',
): Promise<{
  success?: boolean;
  data?: {
    data?: SubscriptionForUser[];
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
  };
}> {
  const response = await axios.get(
    `/api/v1/packages/content-creator/${creatorId}/subscriptions${(() => {
      const parts = [
        page ? 'page=' + encodeURIComponent(page) : null,
        perPage ? 'per_page=' + encodeURIComponent(perPage) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
        currencies
          ? 'currencies[]=' +
            currencies
              .map(String)
              .map(encodeURIComponent)
              .join('&currencies[]=')
          : null,
        minPrice ? 'min_price=' + encodeURIComponent(minPrice) : null,
        maxPrice ? 'max_price=' + encodeURIComponent(maxPrice) : null,
        sortBy ? 'sort_by=' + encodeURIComponent(sortBy) : null,
        sortDirection
          ? 'sort_direction=' + encodeURIComponent(sortDirection)
          : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function getSubscriptionsByCreator(
  creatorId: number,
  page?: number,
  perPage?: number,
  search?: string,
  statuses?: SubscriptionStatuses[],
  startDateFrom?: string,
  startDateTo?: string,
  sortBy?: 'created_at' | 'start_date' | 'end_date' | 'status',
  sortDirection?: 'asc' | 'desc',
): Promise<{
  success?: boolean;
  data?: {
    data?: UserSubscription[];
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
  };
}> {
  const response = await axios.get(
    `/api/v1/content-creator/${creatorId}/subscriptions/users${(() => {
      const parts = [
        page ? 'page=' + encodeURIComponent(page) : null,
        perPage ? 'per_page=' + encodeURIComponent(perPage) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
        statuses
          ? 'statuses[]=' +
            statuses.map(String).map(encodeURIComponent).join('&statuses[]=')
          : null,
        startDateFrom
          ? 'start_date_from=' + encodeURIComponent(startDateFrom)
          : null,
        startDateTo ? 'start_date_to=' + encodeURIComponent(startDateTo) : null,
        sortBy ? 'sort_by=' + encodeURIComponent(sortBy) : null,
        sortDirection
          ? 'sort_direction=' + encodeURIComponent(sortDirection)
          : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function getUserSubscriptions(
  page?: number,
  perPage?: number,
  search?: string,
  statuses?: SubscriptionStatuses[],
  creatorId?: number,
  startDateFrom?: string,
  startDateTo?: string,
  sortBy?: 'created_at' | 'start_date' | 'end_date' | 'status',
  sortDirection?: 'asc' | 'desc',
): Promise<{
  success?: boolean;
  data?: {
    data?: UserSubscription[];
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
  };
}> {
  const response = await axios.get(
    `/api/v1/packages/user/subscriptions${(() => {
      const parts = [
        page ? 'page=' + encodeURIComponent(page) : null,
        perPage ? 'per_page=' + encodeURIComponent(perPage) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
        statuses
          ? 'statuses[]=' +
            statuses.map(String).map(encodeURIComponent).join('&statuses[]=')
          : null,
        creatorId ? 'creator_id=' + encodeURIComponent(creatorId) : null,
        startDateFrom
          ? 'start_date_from=' + encodeURIComponent(startDateFrom)
          : null,
        startDateTo ? 'start_date_to=' + encodeURIComponent(startDateTo) : null,
        sortBy ? 'sort_by=' + encodeURIComponent(sortBy) : null,
        sortDirection
          ? 'sort_direction=' + encodeURIComponent(sortDirection)
          : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function subscribeToPackage(data: {
  package_id: number;
  payment_method: string;
}): Promise<{
  success?: boolean;
  data?: UserSubscription;
}> {
  const response = await axios.post(
    `/api/v1/user/subscriptions/subscribe`,
    data,
  );
  return response.data;
}

export async function getUserTransaction(
  transactionId: number,
): Promise<Transaction> {
  const response = await axios.get(
    `/api/v1/user/transactions/${transactionId}`,
  );
  return response.data;
}

export async function getUserTransactions(
  page?: number,
  perPage?: number,
): Promise<PaginatedResponse> {
  const response = await axios.get(
    `/api/v1/user/transactions${(() => {
      const parts = [
        page ? 'page=' + encodeURIComponent(page) : null,
        perPage ? 'per_page=' + encodeURIComponent(perPage) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function loginUser(
  data:
    | {
        email: string;
        password: string;
      }
    | {
        phone_prefix: string;
        phone: string;
        password: string;
      },
): Promise<
  ApiResponse & {
    data?: {
      access_token?: string;
    };
  }
> {
  const response = await axios.post(`/api/v1/auth/login`, data);
  return response.data;
}

export async function registerContentCreator(
  data:
    | {
        first_name: string;
        last_name: string;
        email: string;
        password: string;
        country_id?: number;
        terms_accepted: boolean;
        social_data?: {
          instagram_url?: string;
          facebook_url?: string;
          tiktok_url?: string;
        };
      }
    | {
        first_name: string;
        last_name: string;
        phone_prefix: string;
        phone: string;
        password: string;
        country_id?: number;
        terms_accepted: boolean;
        social_data?: {
          instagram_url?: string;
          facebook_url?: string;
          tiktok_url?: string;
        };
      },
): Promise<{
  success?: boolean;
  data?: {
    id?: number;
    first_name?: string;
    last_name?: string;
    email?: string;
    access_token?: string;
  };
}> {
  const response = await axios.post(
    `/api/v1/auth/register/content-creator`,
    data,
  );
  return response.data;
}

export async function registerUser(
  data:
    | {
        first_name: string;
        last_name: string;
        email: string;
        password: string;
        password_confirmation: string;
        terms_accepted: boolean;
      }
    | {
        first_name: string;
        last_name: string;
        phone_prefix: string;
        phone: string;
        password: string;
        password_confirmation: string;
        terms_accepted: boolean;
      },
): Promise<
  ApiResponse & {
    data?: UserItem;
  }
> {
  const response = await axios.post(`/api/v1/auth/register`, data);
  return response.data;
}

export async function resendVerificationCode(): Promise<{
  success?: boolean;
  data?: Record<string, any>;
}> {
  const response = await axios.post(`/api/v1/auth/verify/resend`);
  return response.data;
}

export async function verifyUser(data: VerifyUserRequest): Promise<{
  success?: boolean;
  data?: Record<string, any>;
}> {
  const response = await axios.post(`/api/v1/auth/verify`, data);
  return response.data;
}

export async function getAllPhonePrefixes(): Promise<{
  status?: string;
  status_code?: string;
  message?: string;
  data?: {
    value?: string;
    name?: string;
  }[];
}> {
  const response = await axios.get(`/api/v1/user/constants/phone-prefixes`);
  return response.data;
}

export async function showContentCreatorRequest(): Promise<{
  success?: boolean;
  data?: ContentCreatorRequestDto;
}> {
  const response = await axios.get(`/api/v1/user/content-creator/request`);
  return response.data;
}

export async function createContentCreatorRequest(
  data: CreateContentCreatorRequestRequest,
): Promise<{
  success?: boolean;
  data?: {
    id?: number;
    status?: string;
    created_at?: string;
  };
}> {
  const response = await axios.post(
    `/api/v1/user/content-creator/request`,
    data,
  );
  return response.data;
}

export async function getContentCreatorProfile(): Promise<{
  success?: boolean;
  data?: ContentCreatorProfile;
}> {
  const response = await axios.get(`/api/v1/content-creator/profile`);
  return response.data;
}

export async function updateContentCreatorProfile(data: {
  instagram_url?: string;
  facebook_url?: string;
  tiktok_url?: string;
  role?: ContentCreatorRoles;
  sport_id?: number;
  team_id?: number;
  nationality_id?: number;
}): Promise<{
  success?: boolean;
  data?: ContentCreatorProfile;
}> {
  const response = await axios.put(`/api/v1/content-creator/profile`, data);
  return response.data;
}

export async function indexContentCreatorRequests(
  statuses?: ContentCreatorRequestStatus[],
  page?: number,
  perPage?: number,
): Promise<
  PaginatedResponse & {
    data?: ContentCreatorRequestDto[];
  }
> {
  const response = await axios.get(
    `/api/v1/user/content-creator/requests${(() => {
      const parts = [
        statuses
          ? 'statuses[]=' +
            statuses.map(String).map(encodeURIComponent).join('&statuses[]=')
          : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        perPage ? 'per_page=' + encodeURIComponent(perPage) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function showContentCreatorRequestById(id: number): Promise<{
  success?: boolean;
  data?: ContentCreatorRequestDto;
}> {
  const response = await axios.get(
    `/api/v1/user/content-creator/request/${id}`,
  );
  return response.data;
}

export async function userLogout(): Promise<{
  success?: boolean;
  message?: string;
}> {
  const response = await axios.post(`/api/v1/logout`);
  return response.data;
}

export async function getUserMe(): Promise<{
  success?: boolean;
  data?: UserItem;
}> {
  const response = await axios.get(`/api/v1/me`);
  return response.data;
}

export async function saveFavoritesPlayers(
  data: SaveFavoritesPlayersRequest,
): Promise<{
  success?: boolean;
  message?: string;
  data?: {
    player_ids?: number[];
  };
}> {
  const response = await axios.post(`/api/user/favorites/players`, data);
  return response.data;
}

export async function saveFavoritesSports(
  data: SaveFavoritesSportsRequest,
): Promise<{
  success?: boolean;
  message?: string;
  data?: {
    sport_ids?: number[];
  };
}> {
  const response = await axios.post(`/api/v1/user/favorites/sports`, data);
  return response.data;
}

export async function saveFavoritesTeams(
  data: SaveFavoritesTeamsRequest,
): Promise<{
  success?: boolean;
  message?: string;
  data?: {
    team_ids?: number[];
  };
}> {
  const response = await axios.post(`/api/user/favorites/teams`, data);
  return response.data;
}

export async function getUserRegistrationSteps(): Promise<{
  success?: boolean;
  data?: {
    id?: number;
    user_id?: number;
    step_key?: string;
    status?: string;
    completed_at?: string;
    data?: Record<string, any>;
  }[];
}> {
  const response = await axios.get(`/api/v1/user/registration-steps`);
  return response.data;
}

export async function updateRegistrationStep(
  data:
    | {
        step_key: 'choose_sport';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          sport_ids?: number[];
        };
      }
    | {
        step_key: 'choose_team';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          team_ids?: number[];
        };
      }
    | {
        step_key: 'choose_player';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          player_ids?: number[];
        };
      }
    | {
        step_key: 'content_creator_choose_role';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          role?: ContentCreatorRoles;
        };
      }
    | {
        step_key: 'content_creator_choose_sport';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          sport_id?: number;
        };
      }
    | {
        step_key: 'content_creator_choose_team';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          team_id?: number;
        };
      }
    | {
        step_key: 'content_creator_choose_nationality';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          country_id?: number;
        };
      }
    | {
        step_key: 'upload_avatar';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          avatar_file?: any;
        };
      }
    | {
        step_key: 'upload_avatar';
        status: 'filled' | 'skipped' | 'pending';
        data?: {
          default_avatar_id?: string;
        };
      },
): Promise<{
  success?: boolean;
  data?: {
    id?: number;
    user_id?: number;
    step_key?: string;
    status?: string;
    completed_at?: string;
    data?: Record<string, any>;
  };
}> {
  const response = await axios.post(`/api/v1/user/registration-steps`, data);
  return response.data;
}
